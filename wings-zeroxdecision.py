

"""
python基础测试
"""
import os
import string
import re
import sys
import datetime
import time
import copy
import json
import operator #数学计算操作符
import random
import itertools
import math
import matplotlib.pyplot as plt
import numpy as np
import pylab as mpl     #import matplotlib as mpl
#设置汉字格式
# sans-serif就是无衬线字体，是一种通用字体族。
# 常见的无衬线字体有 Trebuchet MS, Tahoma, Verdana, Arial, Helvetica,SimHei 中文的幼圆、隶书等等
mpl.rcParams['font.sans-serif'] = ['SimHei']  # 指定默认字体 FangSong
mpl.rcParams['axes.unicode_minus'] = False  # 解决保存图像是负号'-'显示为方块的问题


import decimal 

nwings1=0
cn1=[]
vn1=[]
cn=[]
vn=[]
vc1={}
fv=np.zeros((3,3))

#读取菜单并根据购买鸡翅的数量构建代价和价值表
def readmenu(nwings):
    infile = open('menu.txt', 'r') #数据文件
    flines=infile.readlines()
    infile.close()
    dataset=flines[1:]
    dataset[-1]=dataset[-1]+"\n"
    #print('dataset=',dataset)
    datastr=[]
    for d1 in dataset:
        x=str.split(d1[:-1],",")
        y=[]
        for e in x:
            if e != "":
                y.append(e)
        datastr.append(y)

    number=[]
    money=[]
    vc={}
    n=len(datastr)
    for x in datastr:
        number.append(int(x[0]))
        money.append(float(x[1]))
        vc[int(x[0])]=float(x[1])
    #print('number=',number)
    #print('money=',money)

    cn=[]
    vn=[]
    for i in range(n):
        if number[i]<=nwings:
            cn.append(number[i])
            vn.append(money[i])
    print('len(cn)=',len(cn))
    print('cn=',cn)
    print('vn=',vn)
    return nwings,cn,vn,vc




# 顺序循环方式
# 指标递推：f(s_k+1)=max(v_k*x_k+f(s_k))
# 状态递推：定义状态为放入后的重量
# 则：s_0=0，s_1=s_0+c_1*x_1，s_2=s_1+c_2*x_2，即s_k=s_k-1+c_k*x_k
# 后面的程序实现中cn[0]表示c_1，cn[1]表示c_2
# 由于要放满，所以s_4=7是必须要达到的限制条件
#
#
def dpint():
    cn=copy.deepcopy(cn1)
    vn=copy.deepcopy(vn1)
    nstate=nwings1

    infp=1000
    nphase=len(cn)
    fv=np.zeros((nphase+1,nstate+1))
    fv[:][:]=infp

    statest=0
    stateed=nstate
    phasest=1
    phaseed=nphase
    phase=0
    fv[phase][statest]=0

    #必须装满
    #建表
    for phase in range(phasest,phaseed+1):
        if(phase!=phaseed):
            for state in range(statest,stateed+1): #通过结构来递推了状态，因此不用把状态单独拿出来计算一遍
                #多种选择 #最多能买多少次，能放多少个:nstate//cn[phase-1]
                fv[phase][state]=min([vn[phase-1]*x+fv[phase-1][state-cn[phase-1]*x] for x in range(nstate//cn[phase-1]+1) if state-cn[phase-1]*x>=statest])
        else:
            state=stateed
            fv[phase][state]=min([vn[phase-1]*x+fv[phase-1][state-cn[phase-1]*x] for x in range(nstate//cn[phase-1]+1) if state-cn[phase-1]*x>=statest])
            #print('phase=',phase)
            #print('state=',state)

    #for x in fv:
    #    print(x)

    return fv

recres=[]
#递归查所有解，等于是深度搜索
def findxp1(phase,state,res):
    #print("res=",res,"phase=",phase,"state=",state)
    #print("fv[phase][state]=",fv[phase][state],"fv[phase-1][state]=",fv[phase-1][state])
    if state==0: #phase==0 or 
        #print("res=",res)
        if res not in recres:
            recres.append(res)
        return 0
    #print("state-cn1[phase-1]=",state-cn1[phase-1])
    for x in range(nwings1//cn1[phase-1]+1):
        if (state-cn1[phase-1]*x)>=0:
            if abs(fv[phase][state] - fv[phase-1][state-cn1[phase-1]*x]-vn1[phase-1]*x)<0.000001:
                res1=copy.deepcopy(res)
                if x>0: res1.extend([cn1[phase-1]]*x)
                #print("res=",res,"phase=",phase-1,"state=",cn1[phase-1]*x)
                findxp1(phase-1,state-cn1[phase-1]*x,res1)


#循环查找所有解，采用宽度搜索  
#注意定义的状态是放入后的状态。
#相比深度优先递归，这里宽度优先使用了一些列表的删除操作，带来了一些额外的开销。速度比深度优先递归稍慢。
def findxpbfs():
    nwings=nwings1
    root=[len(cn),nwings,[]]

    seqt=[]
    opened=[]
    opened.append(root)
    while opened:
        node=opened[0]
        #print('opened=',opened)
        opened.remove(node)

        if node[1]==0: #
            pathcn=node[2]
            #print('solution found')
            #print('solution=',pathcn)
            if pathcn not in seqt:
                seqt.append(pathcn)
        else: #
            '''
            fv定义到[0-len(cn)],fv[len(cn)]表示p=len(cn)阶段放入后的指标。
            cn,vn 定义到[0,len(cn)-1]
            因为定义的是放入后的状态、指标，所以：
            fv[p]代表p阶段放入后的指标，而vn[p]表示p+1阶段价值
            fv[p][s]+vn[p]*x=阶段p+1放入后的指标
            s+cn[p]*x=阶段p+1放入后的状态

            注意阶段只是一个表示：
            '''
            '''
            #阶段1-len(cn),但用p=1-len(cn)表示，
            p=node[0]
            for x in range(nwings1//cn[p-1]+1):
                s=node[1]-cn[p-1]*x
                if s>=0:
                    if abs(fv[p-1][s]+vn[p-1]*x-fv[node[0]][node[1]])<0.000001:
                        pathcn=copy.deepcopy(node[2])
                        if x>0: pathcn.extend([cn[p-1]]*x)
                        opened.append([p-1,s,pathcn])
            '''
            #'''
            #阶段1-len(cn),但用p=0-len(cn)-1表示，
            p=node[0]-1
            for x in range(nwings1//cn[p]+1):
                s=node[1]-cn[p]*x
                if s>=0:
                    if abs(fv[p][s]+vn[p]*x-fv[node[0]][node[1]])<0.000001:
                        pathcn=copy.deepcopy(node[2])
                        if x>0: pathcn.extend([cn[p]]*x)
                        opened.append([p,s,pathcn])
            #'''
    #print("seqt=",seqt)
    return seqt


#循环查找所有解，采用宽度搜索  
#注意定义的状态是放入后的状态。
#因为各阶段的决策的内容都是不同的，所以是没有必要再合并的，所以增加的一些合并计算反而增加了计算量。
def findxpbfs2():
    nwings=nwings1
    minfe=fv[-1][-1]

    root=[len(cn),nwings,minfe,[],[]]

    seqt=[]
    opened=[]
    opened.append(root)
    while opened:
        node=opened[0]
        opened.remove(node)

        if node[1]==0: #
            pathcn=node[4]
            #print('solution found')
            #print('solution=',path,pathcn)
            if pathcn not in seqt:
                seqt.append(pathcn)
        else: #
            '''
            fv定义到[0-len(cn)]
            cn,vn 定义到[0,len(cn)-1]
            因为定义的是放入后的状态、指标，所以：
            fv[p]代表p阶段放入后的指标，而vn[p]表示p+1阶段价值
            fv[p][s]+vn[p]*x=阶段p+1放入后的指标
            s+cn[p]*x=阶段p+1放入后的状态
            #注意阶段只是一个表示：
            #阶段或是定义从p=0-len(cn)-1
            '''
            for p in range(node[0]-1,0,-1):
                for s in range(0,node[1]+1):
                    for x in range(nwings1//cn[p]+1):
                        if s+cn[p]*x==node[1] and abs(fv[p][s]+vn[p]*x-node[2])<0.000001:
                            path=copy.deepcopy(node[3])
                            pathcn=copy.deepcopy(node[4])
                            if x>0:
                                path.extend([p]*x)
                                pathcn.extend([cn[p]]*x)
                            flagexist=False
                            for subnode in opened:
                                if pathcn == subnode[4]:#这里做了路径信息相同情况下的限制，如果相同那么就无法继续计算了。
                                    flagexist=True
                                    break
                            if not flagexist:
                                opened.append([p,s,fv[p][s],path,pathcn])
    #print("seqt=",seqt)
    return seqt



#显示结果
def outres(seqt):
    rest=[]
    for seq in seqt:
        res={}
        resc=seq
        resv=[vc1[x] for x in seq]
        res["number"]=resc
        res["money"]=resv
        if res not in rest:
            rest.append(res)
    #print(rest)

    print("最划算的组合方案数为：",len(rest))
    print("包括方案为：")
    for res in rest:
        print(res["number"],sum(res["money"]))
    print("在该组合方案下，购买%d只鸡翅的价格为:%.2f"%(nwings1,sum(rest[0]["money"])))


if __name__ == "__main__":

    '''
    nwings1,cn1,vn1,vc1=readmenu(12)
    cn=copy.deepcopy(cn1)
    vn=copy.deepcopy(vn1)
    fv=dpint()
    print("fv=",fv)
    recres=[]
    t1=time.process_time()
    #recres=findxpbfs()
    recres=findxpbfs()
    #findxp1(len(cn1),nwings1,[])
    t2=time.process_time()
    timelapsed=t2-t1
    print("len(recres)=",len(recres))
    print("len(recres)=",recres)
    print('time elapsed',timelapsed)
    recres2=recres
    outres(recres2)
    '''

    '''
    buynumbers=[4,8,12,16,20,24,32,40,48,56,72,88,104,110,120,130,140,152,160,184,200,215,232,256,276]
    #buynumbers=[4,8,12,16,20,24,32,40,48]
    #buynumbers=[4]
    magnitudes=[]
    computimes=[]
    solutionsn=[]
    phasetotal=[]
    
    for number  in range(4,301):
        print("number=",number)
        nwings1,cn1,vn1,vc1=readmenu(number)
        cn=copy.deepcopy(cn1)
        vn=copy.deepcopy(vn1)
        recres=[]
        t1=time.process_time()
        #递归的查表的动态规划
        fv=dpint()
        #
        #findxp1(len(cn1),nwings1,[])
        recres=findxpbfs()
        t2=time.process_time()
        timelapsed=t2-t1
        
        computimes.append(timelapsed)
        solutionsn.append(len(recres))
        phasetotal.append(len(cn1))
        magnitudes.append(number*len(cn1)+len(recres)*len(cn1))
        print('time elapsed',timelapsed)
        print("recres=",recres)

    print('buynumbers=',buynumbers)
    print('magnitudes=',magnitudes)
    print('computimes=',computimes)
    print('solutionsn=',solutionsn)
    print('phasetotal=',phasetotal)
    '''


    '''画图
    buynumbers=range(4,301)
    magnitudes= [5, 12, 21, 32, 50, 60, 84, 112, 126, 160, 220, 204, 273, 364, 330, 416, 595, 450, 627, 900, 630, 572, 621, 672, 725, 806, 891, 864, 945, 1053, 972, 1148, 1288, 1120, 1288, 1596, 1305, 1566, 2030, 1421, 1856, 2730, 1650, 2280, 3480, 1800, 1612, 1612, 1674, 1674, 1798, 1891, 1829, 1922, 2170, 1922, 2240, 2592, 2176, 2496, 3200, 2336, 2880, 3936, 2592, 3360, 5412, 2838, 4158, 6930, 3168, 2618, 2652, 2720, 2720, 2856, 3150, 2940, 3150, 3535, 3115, 3500, 4130, 3290, 3850, 5075, 3672, 4572, 6552, 3924, 5364, 8712, 4284, 6408, 11520, 4608, 3811, 3811, 3922, 3885, 4107, 4366, 4107, 4329, 4958, 4255, 4810, 5735, 4551, 5291, 7141, 4810, 6105, 8991, 5254, 7178, 12247, 5587, 8658, 16132, 6179, 4902, 4902, 5016, 4978, 5244, 5624, 5206, 5548, 6346, 5434, 6156, 7486, 5738, 6802, 9348, 6156, 7904, 12008, 6612, 9386, 16416, 7182, 11438, 22192, 7828, 6045, 6045, 6201, 6123, 6474, 6942, 6396, 6825, 7956, 6630, 7644, 9399, 7059, 8463, 12012, 7527, 9945, 15522, 8190, 11934, 21723, 8814, 14703, 29406, 9789, 7059, 7059, 7254, 7137, 7566, 8190, 7449, 7995, 9399, 7722, 8970, 11310, 8190, 10023, 14547, 8814, 11856, 19188, 9555, 14391, 27027, 10413, 17901, 37206, 11505, 8280, 8280, 8520, 8360, 8880, 9680, 8720, 9400, 11200, 9040, 10600, 13560, 9600, 11880, 17720, 10320, 14200, 23560, 11280, 17360, 33680, 12280, 21800, 46600, 13720, 9320, 9320, 9600, 9400, 10000, 10960, 9800, 10600, 12760, 10160, 12000, 15600, 10800, 13520, 20520, 11640, 16240, 27640, 12720, 20040, 39760, 13960, 25320, 55560, 15600, 10400, 10360, 10680, 10440, 11160, 12280, 10920, 11840, 14400, 11320, 13480, 17760, 12080, 15280, 23640, 13040, 18520, 32080, 14360, 23000, 46640, 15760, 29360, 65520, 17800, 11440, 11440, 11800, 11520, 12320, 13640, 12000, 13120, 16120, 12480, 15040, 20080, 13320, 17120, 27000, 14480, 20920, 37000, 15920, 26240, 54160, 17640, 33680, 76640, 19920, 12520]
    computimes
    solutionsn= [1, 1, 1, 1, 2, 1, 2, 3, 2, 3, 6, 2, 5, 9, 4, 7, 15, 4, 11, 22, 6, 1, 1, 1, 1, 2, 3, 1, 3, 6, 2, 6, 10, 3, 8, 18, 5, 13, 28, 6, 20, 46, 9, 29, 68, 11, 2, 1, 2, 1, 4, 6, 3, 5, 12, 3, 10, 20, 6, 15, 36, 8, 24, 56, 13, 36, 94, 15, 54, 137, 22, 2, 2, 3, 2, 5, 10, 3, 8, 18, 5, 15, 32, 7, 22, 56, 12, 36, 90, 16, 55, 147, 23, 81, 222, 29, 3, 2, 4, 2, 7, 13, 5, 10, 26, 6, 20, 44, 11, 30, 79, 15, 49, 126, 24, 75, 211, 30, 112, 313, 43, 4, 3, 5, 3, 9, 18, 6, 14, 34, 9, 27, 61, 14, 41, 107, 22, 67, 174, 31, 103, 287, 43, 154, 436, 57, 5, 4, 7, 4, 12, 23, 8, 18, 46, 11, 36, 80, 19, 54, 144, 28, 89, 231, 42, 137, 387, 55, 205, 581, 77, 6, 5, 9, 5, 15, 30, 10, 23, 58, 14, 45, 104, 23, 69, 184, 36, 113, 300, 52, 175, 498, 71, 262, 756, 96, 7, 6, 11, 6, 18, 37, 12, 28, 72, 17, 55, 128, 28, 84, 229, 43, 139, 372, 64, 215, 622, 86, 323, 942, 119, 8, 7, 13, 7, 21, 44, 14, 33, 86, 20, 65, 154, 33, 100, 274, 51, 165, 449, 75, 257, 749, 103, 386, 1141, 141, 10, 8, 15, 8, 25, 52, 17, 39, 102, 24, 77, 183, 40, 119, 327, 61, 197, 535, 91, 306, 896, 123, 462, 1365, 171, 11, 10, 18, 10, 29, 61, 19, 46, 120, 28, 91, 216, 46, 140, 386, 72, 232, 633, 105, 362, 1059, 145, 545, 1618, 199, 13]
    phasetotal= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40]
    y= [x/80000 for x in magnitudes]

    fig = plt.figure() #绘图初始化
    ax1 = fig.add_subplot(111)
    ax1.plot(buynumbers,computimes,'r-',linewidth=1,label='0-x决策建模的递归查表') #绘制一条
    ax1.plot(buynumbers,y,'b-',linewidth=1,label='根据量级估计时间') #绘制一条
    ax2 = ax1.twinx()#使用ax1相同的x轴
    ax2.plot(buynumbers,solutionsn,'g',linewidth=1,label='解的数量')
    ax1.legend(loc='upper left',frameon=True) #显示图例
    ax2.legend(loc='upper right',frameon=True) #显示图例
    ax1.set_xlabel("鸡翅数量") #增加x轴说明
    ax1.set_ylabel("时间(s)") #增加y轴说明
    ax2.set_ylabel("解的数量") #增加y轴说明
    #plt.xticks(xdtick,ymtick,rotation=40)
    plt.show()

    
    #图2
    magnitudes1= [4, 10, 18, 28, 48, 63, 90, 110, 156, 182, 224, 270, 336, 374, 450, 494, 600, 672, 748, 805, 960, 1050, 1144, 1242, 1400, 1479, 1680, 1736, 1888, 1980, 2074, 2240, 2484, 2553, 2660, 2769, 3080, 3157, 3402, 3483, 3696, 3960, 4094, 4183, 4560, 4704, 5000, 5151, 5408, 5512, 5832, 6050, 6440, 6612, 6786, 6903, 7560, 7686, 7812, 8127, 8448, 8710, 9042, 9179, 9452, 9660, 10220, 10366, 11016, 11169, 11322, 11775, 12084, 12397, 12792, 12956, 13760, 14094, 14268, 14442, 15204, 15555, 15738, 16008, 16544, 16732, 17730, 18109, 18492, 18693, 18894, 19285, 20064, 20273, 20678, 21087, 22000, 22220, 22644, 22866, 23504, 24255, 24486, 24717, 25596, 25833, 26510, 26751, 27664, 27911, 28386, 28865, 29348, 29835, 30090, 30583, 32280, 32670, 32940, 33210, 33604, 34250, 35280, 35560, 36224, 36507, 37310, 37597, 38544, 39102, 39396, 40365, 41072, 41374, 41952, 42256, 43820, 44133, 44446, 45045, 46512, 47125, 47450, 48069, 48544, 48872, 50550, 50887, 51680, 52326, 53284, 53785, 54912, 55264, 55616, 55968, 57600, 58282, 59292, 59658, 60188, 61050, 61420, 61790, 63672, 64220, 65110, 65835, 66392, 66778, 67512, 68600, 69872, 70269, 70666, 71063, 73800, 74210, 75348, 75762, 76728, 77330, 77934, 78727, 79336, 80514, 81510, 81939, 83520, 83955, 84390, 85410, 86632, 87074, 88506, 88953, 91400, 91857, 92314, 93177, 94452, 95120, 95584, 96462, 97968, 98857, 101430, 101913, 102608, 103092, 103576, 104275, 106488, 107198, 107692, 108186, 110000, 110942, 111666, 112169, 114016, 115875, 116390, 116905, 118332, 118851, 120060, 121275, 122496, 123024, 124722, 125490, 126260, 126795, 128044, 128582, 132480, 133032, 134068, 135108, 135908, 137200, 138006, 139061, 140120, 140685, 142500, 143070, 145908, 146993, 147574, 148920, 150272, 150859, 151704, 152551, 154700, 155817, 156414, 157011, 159456, 160325, 161728, 162336, 163212, 163821, 167130, 167749, 169456, 170898, 171524, 172975, 174708, 175341, 175974, 176886, 180600, 181245, 182172, 182818, 183748, 185250, 187044, 187985, 190944, 191896, 193430, 194097, 195056, 195724, 197568, 198535, 199800, 201366, 202044, 203320, 208200]
    computimes1= [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.015625, 0.0, 0.0, 0.0, 0.015625, 0.0, 0.0, 0.0, 0.0, 0.015625, 0.0, 0.0, 0.015625, 0.0, 0.0, 0.015625, 0.0, 0.015625, 0.0, 0.015625, 0.0, 0.015625, 0.015625, 0.0, 0.015625, 0.015625, 0.015625, 0.015625, 0.03125, 0.015625, 0.0, 0.015625, 0.015625, 0.0, 0.015625, 0.015625, 0.015625, 0.015625, 0.03125, 0.015625, 0.03125, 0.03125, 0.015625, 0.03125, 0.046875, 0.03125, 0.03125, 0.0625, 0.03125, 0.0625, 0.09375, 0.03125, 0.046875, 0.125, 0.046875, 0.015625, 0.03125, 0.03125, 0.03125, 0.03125, 0.046875, 0.03125, 0.03125, 0.046875, 0.03125, 0.0625, 0.09375, 0.046875, 0.09375, 0.125, 0.0625, 0.125, 0.203125, 0.046875, 0.140625, 0.265625, 0.078125, 0.171875, 0.421875, 0.078125, 0.046875, 0.0625, 0.0625, 0.0625, 0.0625, 0.125, 0.0625, 0.109375, 0.203125, 0.078125, 0.171875, 0.296875, 0.109375, 0.21875, 0.4375, 0.125, 0.296875, 0.578125, 0.140625, 0.375, 0.890625, 0.21875, 0.53125, 1.296875, 0.234375, 0.078125, 0.109375, 0.125, 0.09375, 0.15625, 0.265625, 0.109375, 0.21875, 0.40625, 0.140625, 0.328125, 0.609375, 0.15625, 0.359375, 0.78125, 0.21875, 0.53125, 1.140625, 0.25, 0.6875, 1.6875, 0.328125, 0.9375, 2.28125, 0.390625, 0.109375, 0.15625, 0.21875, 0.171875, 0.28125, 0.5, 0.203125, 0.4375, 0.90625, 0.265625, 0.734375, 1.375, 0.34375, 0.875, 1.859375, 0.484375, 1.203125, 2.546875, 0.546875, 1.609375, 3.9375, 0.703125, 2.03125, 5.265625, 0.859375, 0.203125, 0.265625, 0.4375, 0.265625, 0.515625, 0.984375, 0.359375, 0.859375, 1.84375, 0.5, 1.390625, 2.765625, 0.671875, 2.296875, 4.1875, 0.875, 2.34375, 5.328125, 0.96875, 2.96875, 7.65625, 1.34375, 4.453125, 10.5, 1.515625, 0.3125, 0.484375, 0.734375, 0.5, 0.9375, 1.84375, 0.625, 1.53125, 3.40625, 0.984375, 3.265625, 6.171875, 1.21875, 4.40625, 12.875, 2.4375, 6.078125, 11.78125, 1.859375, 5.71875, 18.1875, 3.4375, 9.90625, 24.421875, 2.875, 0.453125, 0.921875, 1.265625, 0.859375, 2.65625, 4.9375, 1.296875, 3.296875, 6.625, 1.5625, 4.609375, 10.46875, 2.140625, 6.234375, 12.609375, 2.703125, 8.6875, 18.484375, 3.03125, 9.703125, 26.640625, 4.0625, 14.953125, 33.9375, 4.375, 0.765625, 1.21875, 2.046875, 1.375, 2.578125, 7.0625, 2.46875, 5.53125, 12.375, 2.515625, 7.453125, 17.828125, 4.609375, 14.0625, 30.78125, 4.9375, 18.5, 35.296875, 5.6875, 24.78125, 59.375, 8.25, 25.015625, 71.40625, 11.15625, 1.21875, 2.0625, 4.015625, 2.390625, 5.28125, 9.578125, 3.203125, 7.125, 15.3125, 3.671875, 12.390625, 25.890625, 5.28125, 15.328125, 37.1875, 7.578125, 21.015625, 49.609375, 8.09375, 25.875, 72.84375, 10.265625, 32.59375, 96.515625, 13.3125, 1.984375]
    solutionsn1= [1, 1, 1, 1, 2, 1, 2, 3, 2, 3, 6, 2, 5, 9, 4, 7, 15, 4, 11, 22, 6, 1, 1, 1, 1, 2, 3, 1, 3, 6, 2, 6, 10, 3, 8, 18, 5, 13, 28, 6, 20, 46, 9, 29, 68, 11, 2, 1, 2, 1, 4, 6, 3, 5, 12, 3, 10, 20, 6, 15, 36, 8, 24, 56, 13, 36, 94, 15, 54, 137, 22, 2, 2, 3, 2, 5, 10, 3, 8, 18, 5, 15, 32, 7, 22, 56, 12, 36, 90, 16, 55, 147, 23, 81, 222, 29, 3, 2, 4, 2, 7, 13, 5, 10, 26, 6, 20, 44, 11, 30, 79, 15, 49, 126, 24, 75, 211, 30, 112, 313, 43, 4, 3, 5, 3, 9, 18, 6, 14, 34, 9, 27, 61, 14, 41, 107, 22, 67, 174, 31, 103, 287, 43, 154, 436, 57, 5, 4, 7, 4, 12, 23, 8, 18, 46, 11, 36, 80, 19, 54, 144, 28, 89, 231, 42, 137, 387, 55, 205, 581, 77, 6, 5, 9, 5, 15, 30, 10, 23, 58, 14, 45, 104, 23, 69, 184, 36, 113, 300, 52, 175, 498, 71, 262, 756, 96, 7, 6, 11, 6, 18, 37, 12, 28, 72, 17, 55, 128, 28, 84, 229, 43, 139, 372, 64, 215, 622, 86, 323, 942, 119, 8, 7, 13, 7, 21, 44, 14, 33, 86, 20, 65, 154, 33, 100, 274, 51, 165, 449, 75, 257, 749, 103, 386, 1141, 141, 10, 8, 15, 8, 25, 52, 17, 39, 102, 24, 77, 183, 40, 119, 327, 61, 197, 535, 91, 306, 896, 123, 462, 1365, 171, 11, 10, 18, 10, 29, 61, 19, 46, 120, 28, 91, 216, 46, 140, 386, 72, 232, 633, 105, 362, 1059, 145, 545, 1618, 199, 13]
    phasetotal= [1, 2, 3, 4, 6, 7, 9, 10, 13, 14, 16, 18, 21, 22, 25, 26, 30, 32, 34, 35, 40, 42, 44, 46, 50, 51, 56, 56, 59, 60, 61, 64, 69, 69, 70, 71, 77, 77, 81, 81, 84, 88, 89, 89, 95, 96, 100, 101, 104, 104, 108, 110, 115, 116, 117, 117, 126, 126, 126, 129, 132, 134, 137, 137, 139, 140, 146, 146, 153, 153, 153, 157, 159, 161, 164, 164, 172, 174, 174, 174, 181, 183, 183, 184, 188, 188, 197, 199, 201, 201, 201, 203, 209, 209, 211, 213, 220, 220, 222, 222, 226, 231, 231, 231, 237, 237, 241, 241, 247, 247, 249, 251, 253, 255, 255, 257, 269, 270, 270, 270, 271, 274, 280, 280, 283, 283, 287, 287, 292, 294, 294, 299, 302, 302, 304, 304, 313, 313, 313, 315, 323, 325, 325, 327, 328, 328, 337, 337, 340, 342, 346, 347, 352, 352, 352, 352, 360, 362, 366, 366, 367, 370, 370, 370, 379, 380, 383, 385, 386, 386, 388, 392, 397, 397, 397, 397, 410, 410, 414, 414, 417, 418, 419, 421, 422, 426, 429, 429, 435, 435, 435, 438, 442, 442, 447, 447, 457, 457, 457, 459, 463, 464, 464, 466, 471, 473, 483, 483, 484, 484, 484, 485, 493, 494, 494, 494, 500, 502, 503, 503, 509, 515, 515, 515, 519, 519, 522, 525, 528, 528, 533, 534, 535, 535, 538, 538, 552, 552, 554, 556, 557, 560, 561, 563, 565, 565, 570, 570, 579, 581, 581, 584, 587, 587, 588, 589, 595, 597, 597, 597, 604, 605, 608, 608, 609, 609, 619, 619, 623, 626, 626, 629, 633, 633, 633, 634, 645, 645, 646, 646, 647, 650, 654, 655, 663, 664, 667, 667, 668, 668, 672, 673, 675, 678, 678, 680, 694]
    y1= [x/75000 for x in magnitudes1]

    fig = plt.figure() #绘图初始化
    ax1 = fig.add_subplot(111)
    ax1.plot(buynumbers,computimes,'r-',linewidth=1,label='0-x决策建模的递归查表') #绘制一条
    ax1.plot(buynumbers,computimes1,'p-',linewidth=1,label='改进的宽度优先查表') #绘制一条
    ax1.plot(buynumbers,y1,'b-',linewidth=1,label='根据量级估计时间') #绘制一条
    ax2 = ax1.twinx()#使用ax1相同的x轴
    ax2.plot(buynumbers,solutionsn1,'g',linewidth=1,label='解的数量')
    ax1.legend(loc='upper left',frameon=True) #显示图例
    ax2.legend(loc='upper right',frameon=True) #显示图例
    ax1.set_xlabel("鸡翅数量") #增加x轴说明
    ax1.set_ylabel("时间(s)") #增加y轴说明
    ax2.set_ylabel("解的数量") #增加y轴说明
    #plt.xticks(xdtick,ymtick,rotation=40)
    plt.show()
    '''

    #'''
    buynumbers=range(4,301)
    magnitudes= [5, 12, 21, 32, 50, 60, 84, 112, 126, 160, 220, 204, 273, 364, 330, 416, 595, 450, 627, 900, 630, 572, 621, 672, 725, 806, 891, 864, 945, 1053, 972, 1148, 1288, 1120, 1288, 1596, 1305, 1566, 2030, 1421, 1856, 2730, 1650, 2280, 3480, 1800, 1612, 1612, 1674, 1674, 1798, 1891, 1829, 1922, 2170, 1922, 2240, 2592, 2176, 2496, 3200, 2336, 2880, 3936, 2592, 3360, 5412, 2838, 4158, 6930, 3168, 2618, 2652, 2720, 2720, 2856, 3150, 2940, 3150, 3535, 3115, 3500, 4130, 3290, 3850, 5075, 3672, 4572, 6552, 3924, 5364, 8712, 4284, 6408, 11520, 4608, 3811, 3811, 3922, 3885, 4107, 4366, 4107, 4329, 4958, 4255, 4810, 5735, 4551, 5291, 7141, 4810, 6105, 8991, 5254, 7178, 12247, 5587, 8658, 16132, 6179, 4902, 4902, 5016, 4978, 5244, 5624, 5206, 5548, 6346, 5434, 6156, 7486, 5738, 6802, 9348, 6156, 7904, 12008, 6612, 9386, 16416, 7182, 11438, 22192, 7828, 6045, 6045, 6201, 6123, 6474, 6942, 6396, 6825, 7956, 6630, 7644, 9399, 7059, 8463, 12012, 7527, 9945, 15522, 8190, 11934, 21723, 8814, 14703, 29406, 9789, 7059, 7059, 7254, 7137, 7566, 8190, 7449, 7995, 9399, 7722, 8970, 11310, 8190, 10023, 14547, 8814, 11856, 19188, 9555, 14391, 27027, 10413, 17901, 37206, 11505, 8280, 8280, 8520, 8360, 8880, 9680, 8720, 9400, 11200, 9040, 10600, 13560, 9600, 11880, 17720, 10320, 14200, 23560, 11280, 17360, 33680, 12280, 21800, 46600, 13720, 9320, 9320, 9600, 9400, 10000, 10960, 9800, 10600, 12760, 10160, 12000, 15600, 10800, 13520, 20520, 11640, 16240, 27640, 12720, 20040, 39760, 13960, 25320, 55560, 15600, 10400, 10360, 10680, 10440, 11160, 12280, 10920, 11840, 14400, 11320, 13480, 17760, 12080, 15280, 23640, 13040, 18520, 32080, 14360, 23000, 46640, 15760, 29360, 65520, 17800, 11440, 11440, 11800, 11520, 12320, 13640, 12000, 13120, 16120, 12480, 15040, 20080, 13320, 17120, 27000, 14480, 20920, 37000, 15920, 26240, 54160, 17640, 33680, 76640, 19920, 12520]
    computimes
    solutionsn= [1, 1, 1, 1, 2, 1, 2, 3, 2, 3, 6, 2, 5, 9, 4, 7, 15, 4, 11, 22, 6, 1, 1, 1, 1, 2, 3, 1, 3, 6, 2, 6, 10, 3, 8, 18, 5, 13, 28, 6, 20, 46, 9, 29, 68, 11, 2, 1, 2, 1, 4, 6, 3, 5, 12, 3, 10, 20, 6, 15, 36, 8, 24, 56, 13, 36, 94, 15, 54, 137, 22, 2, 2, 3, 2, 5, 10, 3, 8, 18, 5, 15, 32, 7, 22, 56, 12, 36, 90, 16, 55, 147, 23, 81, 222, 29, 3, 2, 4, 2, 7, 13, 5, 10, 26, 6, 20, 44, 11, 30, 79, 15, 49, 126, 24, 75, 211, 30, 112, 313, 43, 4, 3, 5, 3, 9, 18, 6, 14, 34, 9, 27, 61, 14, 41, 107, 22, 67, 174, 31, 103, 287, 43, 154, 436, 57, 5, 4, 7, 4, 12, 23, 8, 18, 46, 11, 36, 80, 19, 54, 144, 28, 89, 231, 42, 137, 387, 55, 205, 581, 77, 6, 5, 9, 5, 15, 30, 10, 23, 58, 14, 45, 104, 23, 69, 184, 36, 113, 300, 52, 175, 498, 71, 262, 756, 96, 7, 6, 11, 6, 18, 37, 12, 28, 72, 17, 55, 128, 28, 84, 229, 43, 139, 372, 64, 215, 622, 86, 323, 942, 119, 8, 7, 13, 7, 21, 44, 14, 33, 86, 20, 65, 154, 33, 100, 274, 51, 165, 449, 75, 257, 749, 103, 386, 1141, 141, 10, 8, 15, 8, 25, 52, 17, 39, 102, 24, 77, 183, 40, 119, 327, 61, 197, 535, 91, 306, 896, 123, 462, 1365, 171, 11, 10, 18, 10, 29, 61, 19, 46, 120, 28, 91, 216, 46, 140, 386, 72, 232, 633, 105, 362, 1059, 145, 545, 1618, 199, 13]
    phasetotal= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40]
    y= [x/80000 for x in magnitudes]


    magnitudes2= [5, 12, 21, 32, 50, 60, 84, 112, 126, 160, 220, 204, 273, 364, 330, 416, 595, 450, 627, 900, 630, 572, 621, 672, 725, 806, 891, 864, 945, 1053, 972, 1148, 1288, 1120, 1288, 1596, 1305, 1566, 2030, 1421, 1856, 2730, 1650, 2280, 3480, 1800, 1612, 1612, 1674, 1674, 1798, 1891, 1829, 1922, 2170, 1922, 2240, 2592, 2176, 2496, 3200, 2336, 2880, 3936, 2592, 3360, 5412, 2838, 4158, 6930, 3168, 2618, 2652, 2720, 2720, 2856, 3150, 2940, 3150, 3535, 3115, 3500, 4130, 3290, 3850, 5075, 3672, 4572, 6552, 3924, 5364, 8712, 4284, 6408, 11520, 4608, 3811, 3811, 3922, 3885, 4107, 4366, 4107, 4329, 4958, 4255, 4810, 5735, 4551, 5291, 7141, 4810, 6105, 8991, 5254, 7178, 12247, 5587, 8658, 16132, 6179, 4902, 4902, 5016, 4978, 5244, 5624, 5206, 5548, 6346, 5434, 6156, 7486, 5738, 6802, 9348, 6156, 7904, 12008, 6612, 9386, 16416, 7182, 11438, 22192, 7828, 6045, 6045, 6201, 6123, 6474, 6942, 6396, 6825, 7956, 6630, 7644, 9399, 7059, 8463, 12012, 7527, 9945, 15522, 8190, 11934, 21723, 8814, 14703, 29406, 9789, 7059, 7059, 7254, 7137, 7566, 8190, 7449, 7995, 9399, 7722, 8970, 11310, 8190, 10023, 14547, 8814, 11856, 19188, 9555, 14391, 27027, 10413, 17901, 37206, 11505, 8280, 8280, 8520, 8360, 8880, 9680, 8720, 9400, 11200, 9040, 10600, 13560, 9600, 11880, 17720, 10320, 14200, 23560, 11280, 17360, 33680, 12280, 21800, 46600, 13720, 9320, 9320, 9600, 9400, 10000, 10960, 9800, 10600, 12760, 10160, 12000, 15600, 10800, 13520, 20520, 11640, 16240, 27640, 12720, 20040, 39760, 13960, 25320, 55560, 15600, 10400, 10360, 10680, 10440, 11160, 12280, 10920, 11840, 14400, 11320, 13480, 17760, 12080, 15280, 23640, 13040, 18520, 32080, 14360, 23000, 46640, 15760, 29360, 65520, 17800, 11440, 11440, 11800, 11520, 12320, 13640, 12000, 13120, 16120, 12480, 15040, 20080, 13320, 17120, 27000, 14480, 20920, 37000, 15920, 26240, 54160, 17640, 33680, 76640, 19920, 12520]
    computimes2= [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.015625, 0.0, 0.0, 0.0, 0.015625, 0.0, 0.015625, 0.0, 0.0, 0.015625, 0.0, 0.0, 0.015625, 0.0, 0.015625, 0.0, 0.015625, 0.0, 0.015625, 0.0, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.0, 0.0, 0.015625, 0.015625, 0.0, 0.015625, 0.046875, 0.015625, 0.0, 0.015625, 0.015625, 0.015625, 0.0, 0.03125, 0.015625, 0.015625, 0.015625, 0.015625, 0.03125, 0.03125, 0.015625, 0.015625, 0.03125, 0.015625, 0.03125, 0.046875, 0.015625, 0.046875, 0.046875, 0.03125, 0.03125, 0.0625, 0.046875, 0.03125, 0.03125, 0.015625, 0.015625, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.046875, 0.03125, 0.046875, 0.03125, 0.046875, 0.078125, 0.0625, 0.09375, 0.109375, 0.046875, 0.125, 0.171875, 0.0625, 0.078125, 0.15625, 0.046875, 0.0625, 0.0625, 0.0625, 0.03125, 0.0625, 0.046875, 0.046875, 0.046875, 0.078125, 0.078125, 0.0625, 0.09375, 0.0625, 0.09375, 0.140625, 0.0625, 0.0625, 0.125, 0.0625, 0.09375, 0.15625, 0.078125, 0.109375, 0.21875, 0.078125, 0.046875, 0.078125, 0.046875, 0.0625, 0.09375, 0.0625, 0.09375, 0.078125, 0.078125, 0.0625, 0.078125, 0.15625, 0.09375, 0.109375, 0.125, 0.078125, 0.109375, 0.203125, 0.109375, 0.140625, 0.234375, 0.078125, 0.140625, 0.28125, 0.109375, 0.078125, 0.0625, 0.078125, 0.0625, 0.0625, 0.09375, 0.078125, 0.078125, 0.125, 0.078125, 0.078125, 0.140625, 0.09375, 0.125, 0.15625, 0.078125, 0.125, 0.203125, 0.09375, 0.125, 0.25, 0.078125, 0.171875, 0.34375, 0.09375, 0.0625, 0.078125, 0.078125, 0.09375, 0.078125, 0.09375, 0.078125, 0.109375, 0.15625, 0.09375, 0.109375, 0.15625, 0.109375, 0.15625, 0.234375, 0.125, 0.15625, 0.234375, 0.109375, 0.203125, 0.359375, 0.125, 0.3125, 0.546875, 0.171875, 0.09375, 0.09375, 0.078125, 0.109375, 0.109375, 0.125, 0.109375, 0.140625, 0.171875, 0.125, 0.15625, 0.21875, 0.125, 0.171875, 0.28125, 0.140625, 0.234375, 0.4375, 0.171875, 0.265625, 0.59375, 0.203125, 0.34375, 0.6875, 0.1875, 0.109375, 0.109375, 0.109375, 0.15625, 0.09375, 0.140625, 0.125, 0.140625, 0.21875, 0.171875, 0.1875, 0.265625, 0.140625, 0.21875, 0.375, 0.171875, 0.3125, 0.5, 0.21875, 0.421875, 0.71875, 0.21875, 0.390625, 0.96875, 0.234375, 0.140625, 0.140625, 0.125, 0.203125, 0.234375, 0.21875, 0.21875, 0.25, 0.359375, 0.234375, 0.328125, 0.625, 0.265625, 0.359375, 0.546875, 0.28125, 0.484375, 0.828125, 0.3125, 0.6875, 1.171875, 0.359375, 0.6875, 1.703125, 0.390625, 0.21875, 0.25, 0.21875, 0.203125, 0.234375, 0.3125, 0.234375, 0.21875, 0.40625, 0.25, 0.328125, 0.5, 0.28125, 0.40625, 0.734375, 0.34375, 0.53125, 1.046875, 0.359375, 0.65625, 1.3125, 0.328125, 0.703125, 1.59375, 0.390625, 0.203125]
    solutionsn2= [1, 1, 1, 1, 2, 1, 2, 3, 2, 3, 6, 2, 5, 9, 4, 7, 15, 4, 11, 22, 6, 1, 1, 1, 1, 2, 3, 1, 3, 6, 2, 6, 10, 3, 8, 18, 5, 13, 28, 6, 20, 46, 9, 29, 68, 11, 2, 1, 2, 1, 4, 6, 3, 5, 12, 3, 10, 20, 6, 15, 36, 8, 24, 56, 13, 36, 94, 15, 54, 137, 22, 2, 2, 3, 2, 5, 10, 3, 8, 18, 5, 15, 32, 7, 22, 56, 12, 36, 90, 16, 55, 147, 23, 81, 222, 29, 3, 2, 4, 2, 7, 13, 5, 10, 26, 6, 20, 44, 11, 30, 79, 15, 49, 126, 24, 75, 211, 30, 112, 313, 43, 4, 3, 5, 3, 9, 18, 6, 14, 34, 9, 27, 61, 14, 41, 107, 22, 67, 174, 31, 103, 287, 43, 154, 436, 57, 5, 4, 7, 4, 12, 23, 8, 18, 46, 11, 36, 80, 19, 54, 144, 28, 89, 231, 42, 137, 387, 55, 205, 581, 77, 6, 5, 9, 5, 15, 30, 10, 23, 58, 14, 45, 104, 23, 69, 184, 36, 113, 300, 52, 175, 498, 71, 262, 756, 96, 7, 6, 11, 6, 18, 37, 12, 28, 72, 17, 55, 128, 28, 84, 229, 43, 139, 372, 64, 215, 622, 86, 323, 942, 119, 8, 7, 13, 7, 21, 44, 14, 33, 86, 20, 65, 154, 33, 100, 274, 51, 165, 449, 75, 257, 749, 103, 386, 1141, 141, 10, 8, 15, 8, 25, 52, 17, 39, 102, 24, 77, 183, 40, 119, 327, 61, 197, 535, 91, 306, 896, 123, 462, 1365, 171, 11, 10, 18, 10, 29, 61, 19, 46, 120, 28, 91, 216, 46, 140, 386, 72, 232, 633, 105, 362, 1059, 145, 545, 1618, 199, 13]
    phasetotal2= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40]

    computimes
    solutionsn2= [1, 1, 1, 1, 2, 1, 2, 3, 2, 3, 6, 2, 5, 9, 4, 7, 15, 4, 11, 22, 6, 1, 1, 1, 1, 2, 3, 1, 3, 6, 2, 6, 10, 3, 8, 18, 5, 13, 28, 6, 20, 46, 9, 29, 68, 11, 2, 1, 2, 1, 4, 6, 3, 5, 12, 3, 10, 20, 6, 15, 36, 8, 24, 56, 13, 36, 94, 15, 54, 137, 22, 2, 2, 3, 2, 5, 10, 3, 8, 18, 5, 15, 32, 7, 22, 56, 12, 36, 90, 16, 55, 147, 23, 81, 222, 29, 3, 2, 4, 2, 7, 13, 5, 10, 26, 6, 20, 44, 11, 30, 79, 15, 49, 126, 24, 75, 211, 30, 112, 313, 43, 4, 3, 5, 3, 9, 18, 6, 14, 34, 9, 27, 61, 14, 41, 107, 22, 67, 174, 31, 103, 287, 43, 154, 436, 57, 5, 4, 7, 4, 12, 23, 8, 18, 46, 11, 36, 80, 19, 54, 144, 28, 89, 231, 42, 137, 387, 55, 205, 581, 77, 6, 5, 9, 5, 15, 30, 10, 23, 58, 14, 45, 104, 23, 69, 184, 36, 113, 300, 52, 175, 498, 71, 262, 756, 96, 7, 6, 11, 6, 18, 37, 12, 28, 72, 17, 55, 128, 28, 84, 229, 43, 139, 372, 64, 215, 622, 86, 323, 942, 119, 8, 7, 13, 7, 21, 44, 14, 33, 86, 20, 65, 154, 33, 100, 274, 51, 165, 449, 75, 257, 749, 103, 386, 1141, 141, 10, 8, 15, 8, 25, 52, 17, 39, 102, 24, 77, 183, 40, 119, 327, 61, 197, 535, 91, 306, 896, 123, 462, 1365, 171, 11, 10, 18, 10, 29, 61, 19, 46, 120, 28, 91, 216, 46, 140, 386, 72, 232, 633, 105, 362, 1059, 145, 545, 1618, 199, 13]
    phasetotal2= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40]


    fig = plt.figure() #绘图初始化
    ax1 = fig.add_subplot(111)
    ax1.plot(buynumbers,computimes,'r-',linewidth=1,label='0-x决策建模的递归查表') #绘制一条
    ax1.plot(buynumbers,computimes2,'m-',linewidth=1,label='0-x决策建模的宽度优先查表') #绘制一条
    #ax1.plot(buynumbers,y,'b-',linewidth=1,label='根据量级估计时间') #绘制一条
    #ax2 = ax1.twinx()#使用ax1相同的x轴
    #ax2.plot(buynumbers,solutionsn,'g',linewidth=1,label='解的数量')
    ax1.legend(loc='upper left',frameon=True) #显示图例
    #ax2.legend(loc='upper right',frameon=True) #显示图例
    ax1.set_xlabel("鸡翅数量") #增加x轴说明
    ax1.set_ylabel("时间(s)") #增加y轴说明
    #ax2.set_ylabel("解的数量") #增加y轴说明
    #plt.xticks(xdtick,ymtick,rotation=40)
    plt.show()
    #'''